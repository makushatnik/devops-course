<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions/>
  <description>AutoTrigger for checking if the written code is right.&#xd;
Continuous Integration part.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>15</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.33.1">
      <projectUrl>git@github.com:makushatnik/devops-course.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.20">
      <gitLabConnection>Gitlab</gitLabConnection>
      <jobCredentialId></jobCredentialId>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.5.20">
          <spec></spec>
          <triggerOnPush>true</triggerOnPush>
          <triggerToBranchDeleteRequest>false</triggerToBranchDeleteRequest>
          <triggerOnMergeRequest>true</triggerOnMergeRequest>
          <triggerOnlyIfNewCommitsPushed>false</triggerOnlyIfNewCommitsPushed>
          <triggerOnPipelineEvent>false</triggerOnPipelineEvent>
          <triggerOnAcceptedMergeRequest>false</triggerOnAcceptedMergeRequest>
          <triggerOnClosedMergeRequest>false</triggerOnClosedMergeRequest>
          <triggerOnApprovedMergeRequest>true</triggerOnApprovedMergeRequest>
          <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
          <triggerOnNoteRequest>true</triggerOnNoteRequest>
          <noteRegex>Jenkins please retry a build</noteRegex>
          <ciSkip>true</ciSkip>
          <skipWorkInProgressMergeRequest>true</skipWorkInProgressMergeRequest>
          <labelsThatForcesBuildIfAdded></labelsThatForcesBuildIfAdded>
          <setBuildDescription>true</setBuildDescription>
          <branchFilterType>All</branchFilterType>
          <includeBranchesSpec></includeBranchesSpec>
          <excludeBranchesSpec></excludeBranchesSpec>
          <sourceBranchRegex></sourceBranchRegex>
          <targetBranchRegex></targetBranchRegex>
          <secretToken>{AQAAABAAAAAwPgdACFPGeqxlXbZxZHnOt+FGsZ1i08P9vedcyH+vYkLgRY56TuAd/3abcnpd7uABJijoeokiePAysp9FAHG2mQ==}</secretToken>
          <pendingBuildName></pendingBuildName>
          <cancelPendingBuildsOnUpdate>false</cancelPendingBuildsOnUpdate>
        </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
    <script>pipeline {
  agent any

  stages {
    stage(&apos;Clone repository&apos;) {
      steps {
        git branch: &apos;dev&apos;, changelog: false, credentialsId: &apos;github-ssh&apos;, poll: false, url: &apos;git@github.com:makushatnik/devops-course.git&apos;
      }
    }
    stage(&quot;SonarQube&quot;) {
      agent { docker {
          image &apos;newtmitch/sonar-scanner&apos;
          args &apos;-v /var/run/docker.sock:/var/run/docker.sock -v ${WORKSPACE}/conf:/usr/lib/sonar-scanner/conf \
          --network host&apos;
          reuseNode true
      } }
      steps {
        echo &quot;=========== Code Lint is started =============&quot;
        sh &apos;sonar-scanner&apos;
      }
    }
    stage(&quot;Test&quot;) {
      steps {
        echo &quot; ============= Tests Started =========&quot;
        echo &quot;PARAM STR - ${params.ARTIFACT_NAME}&quot;
        sh &apos;cp -r ${WORKSPACE}/exam/spring/mvnw ${WORKSPACE}/exam/spring/.mvn ${WORKSPACE}/exam/spring/Dockerfile ${WORKSPACE}/exam/spring/.dockerignore ${WORKSPACE}/exam/spring/pom.xml ${WORKSPACE}/exam/spring/src ${WORKSPACE}&apos;
        sh &apos;chmod u+x ${WORKSPACE}/mvnw&apos;
        sh &apos;${WORKSPACE}/mvnw test&apos;
        //junit &apos;reports/**/*.xml&apos;
      }
    }
    stage(&quot;Build&quot;) {
      steps {
        echo &quot; ============= Build Started =========&quot;
        sh &apos;${WORKSPACE}/mvnw package&apos;
      }
    }
  }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>